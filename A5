

/// counts number of primes from standard input
///
/// compile with:
///   $ gcc findPrimes.c -O2 -o count -lm
///
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <queue>
#include <list>
#include <iterator>
#include <algorithm>

using namespace std;

	volatile long count = 0;
	int counter = 0;
	queue <int> optQ;
	queue <int> lruQ;
	queue <int> clockQ;
	int x;
	int y;

int positionCalc(queue <int> q,int p)
{
	counter = 0;
	while(!q.empty())
	{
		if(p == q.front())
		{
			return counter;
		}
		q.pop();
		counter++;
	}
	
	
	
	
	return 0;
}

int main( int argc, char ** argv)
{
    /// parse command line arguments
    int numberOfFrames = 1;
	
    if( argc != 1 && argc != 2 && argc != 3) {
        printf("not enough info \n");
        exit(-1);
    }
    if( argc == 2) 
	{
		numberOfFrames = atoi( argv[1]);
	}
		
	

    /// handle invalid arguments
    if( numberOfFrames< 0 || numberOfFrames > 256) {
        printf("Bad arguments. 1 <= numberOfFrames <= 256!\n");
    }

    while( 1)
    {
        int num;
        if( 1 != scanf("%ld", & num)) break;
        optQ.push(num);
		lruQ.push(num);
		clockQ.push(num);

    }

	printf("NUMBER OF FRAMES: %d \n" , numberOfFrames);
	printf("OPTIMAL \n");
	int opt[numberOfFrames];
	int optCount = 0;
	int optLst[numberOfFrames];
	const int listSize = sizeof(optLst) / sizeof(int);
	int heck = 0;
	
	for(int i = 0; i < numberOfFrames; i++)
	{
		opt[i] = optQ.front();
		optQ.pop(); 
		optCount++;
	}

	while(!optQ.empty())
	{
		heck=0;
		// 1 2 3 
		//3 
		//if it is inside 
		for(int i = 0; i < numberOfFrames; i++)
		{
			if(optQ.front() == opt[i])
			{
				heck = 1;
				optQ.pop();
				break;
			}
		}
		//end of if it is inside 
		// 1 2 3 
		// 4 ?? 
		
		//start of else
		if(heck == 0)
		{ 
			for(int i = 0; i < numberOfFrames; i++)
			{
				x = opt[i];
				int urMom = positionCalc(optQ, x);
				if(urMom == 0)
				{
					urMom = 10000;
				}
				optLst[i] = urMom;
			}
			int position = distance(optLst, max_element(optLst, (optLst + listSize)));
			opt[distance (optLst, max_element(optLst, (optLst + listSize)))] = optQ.front();
			optCount++;
			optQ.pop();
		}
		//end of else 
		
	}
	printf("FRAME:  ");
	for(int i = 0 ; i < numberOfFrames; i++)
	{
		printf("%d", opt[i]);
	}
	printf("\n number of faults%d\n",optCount);

	printf("LRU \n");

	int lru[numberOfFrames];
	int lruLst[numberOfFrames];
	queue <int> lruQTwo;
	int lruCount = 0;
	int lruPosition=0;
	int heckL = 0;

	for(int i = 0; i < numberOfFrames; i++)
	{
		lru[i] = lruQ.front();
		lruQTwo.push(lruQ.front()); 
		lruQ.pop(); 
		lruCount++;
	}


	while(!lruQ.empty())
	{	
		printf("\\\\\\ THIS IS TESTING ///////////");
		printf("\n lruFront %d \n", lruQ.front());
		printf("FRAMES:");
		for(int i = 0; i < numberOfFrames; i++)
		{
			printf("%d   ",lru[i]);
		} 
		printf("\n\n\n");
		heckL = 0;
		//its already in the frames then do nothing 
		for(int i = 0; i < numberOfFrames; i++)
		{
			if(lruQ.front() == lru[i])
			{			
				heckL = 1;
				lruQTwo.push(lruQ.front());
				lruQ.pop();
				break;
			}
		}

		if(heckL == 0)
		{
			for(int i = 0; i < numberOfFrames; i++)
			{
				y = lru[i];
				int urMom2 = positionCalc(lruQTwo, y);

				lruLst[i] = urMom2;
				
			}
			int position2 = distance(lruLst, max_element(lruLst, (lruLst + listSize)));
			
			lru[distance (lruLst, min_element(lruLst, (lruLst + listSize)))] = lruQ.front();
			
			lruQTwo.push(lruQ.front());
			lruQ.pop();
			lruCount++;
			
			
		}
		//it isnt in the frames do last recently used.......
		//ok so my issue is where in the array im putting them
		// [1] [2] [3] [4] how do i know where they go? with a counter!!!!!
		
		
		
		// 1 2 3 
		//4 
	}
		printf("FRAME:  ");
		for(int i = 0 ; i < numberOfFrames; i++)
	{
		printf("%d", lru[i]);
	}
	printf("\n number of faults%d\n",lruCount);
	
	printf("CLOCK \n");
/*	int clock[numberOfFrames];
	int write[numberOfFrames];
	int clockCount = 0;
	int used = 1;
	for(int i = 0; i < numberOfFrames;i++)
	{
		write[i] = 0;
	}
	for(int i = 0; i < numberOfFrames; i++)
	{
		clock[i] = clockQ.front(); 
		write[i] = 1;
		clockQ.pop(); 
		clockCount++;
	}
//	while(!clockQ.isEmpty())
//	{
		
//	}
*/
    return 0;
}


