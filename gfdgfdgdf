/// counts number of primes from standard input
///
/// compile with:
///   $ gcc findPrimes.c -O2 -o count -lm
///
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <pthread.h>
#include <queue>

using namespace std;

pthread_mutex_t mutex;
 volatile long count = 0;
int64_t number;
queue <int64_t> Q;
queue <pthread_t> threadPool;
pthread_t thread;
volatile bool loop = true ;
int counter = 0;

/// primality test, if n is prime, return 1, else return 0
int isPrime(int64_t n)
{
     if( n <= 1) return 0; // small numbers are not primes
     if( n <= 3) return 1; // 2 and 3 are prime
     if( n % 2 == 0 || n % 3 == 0) return 0; // multiples of 2 and 3 are not primes
     int64_t i = 5;
     int64_t max = sqrt(n);
     while( i <= max) {
         if (n % i == 0 || n % (i+2) == 0) return 0;
         i += 6;
     }
     return 1;
}

void *pool(void *arg)
{
	while(loop)
	{ 
		if(Q.empty())
		{
			continue;
		}
		if(isPrime(Q.front()) == 1)
		{
			
			pthread_mutex_lock(&mutex);
			counter++;
			pthread_mutex_unlock(&mutex);			
		}
		pthread_mutex_lock(&mutex);
		Q.pop();
		pthread_mutex_unlock(&mutex);
		
	}

}

int main( int argc, char ** argv)
{
    /// parse command line arguments
    int nThreads = 1;
    if( argc != 1 && argc != 2) {
        printf("Uasge: countPrimes [nThreads]\n");
        exit(-1);
    }
    if( argc == 2) nThreads = atoi( argv[1]);

    /// handle invalid arguments
    if( nThreads < 1 || nThreads > 256) {
        printf("Bad arguments. 1 <= nThreads <= 256!\n");
    }


    /// count the primes
    printf("Counting primes using %d thread%s.\n",
           nThreads, nThreads == 1 ? "s" : "");
           
          //create thread pool.

    for(int i = 0; i<nThreads; i++)
    {

        pthread_create(&thread, NULL, pool, NULL);
        threadPool.push(thread);
	}
     
    while( 1)
    {
        int64_t num;
        if( 1 != scanf("%ld", & num)) break;
        Q.push(num);

    }

	while(1)
	{
		if(Q.empty())
		{
			loop = false;
			break;
		}
		
		
	}
	
	for(int i = 0 ; i < Q.size(); i++)
	{
		pthread_t priority = threadPool.front();
		pthread_join(priority, NULL);
		threadPool.pop();
	}
	
    /// report results
    printf("Found %ld primes.\n", counter);

    return 0;
}

